{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","value","onChange","event","target","backgroundColor","border","rows","cols","disabled","length","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","filter","element","About","myStyle","Alert","height","alert","word","lower","charAt","slice","Capitalize","msg","App","setMode","setalert","message","setTimeout","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c8010411.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          <strong> {props.title}</strong>\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                <strong>Home</strong>\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                <strong>About</strong>\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              <strong>Enable Dark Mode</strong>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpcase = () => {\r\n    //   console.log(\"Uppercase was clicked \" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to upper case\", \"success\");\r\n  };\r\n\r\n  const handleLocase = () => {\r\n    //   console.log(\"Lowercase was clicked \" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lower case\", \"success\");\r\n  };\r\n\r\n  const ClearText = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text has been cleared\", \"success\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text has been Copied\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces has been removed from your text\", \"success\");\r\n  };\r\n\r\n  const handleonChange = (event) => {\r\n    //   console.log(\"on change\")\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h1>Enter our text to Analyze:</h1>\r\n\r\n        <div className=\"mb-2\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleonChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#1e2b25\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n              border: \"3px solid black\",\r\n            }}\r\n            id=\"myBox\"\r\n            rows=\"10\"\r\n            cols=\"173\"\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"button\">\r\n          <button\r\n            disabled={text.length === 0}\r\n            className=\"btn btn-primary me-2\"\r\n            onClick={handleUpcase}\r\n          >\r\n            Convert to Upper Case\r\n          </button>\r\n          <button\r\n            disabled={text.length === 0}\r\n            className=\"btn btn-primary me-2\"\r\n            onClick={handleLocase}\r\n          >\r\n            Convert to Lower Case\r\n          </button>\r\n          <button\r\n            disabled={text.length === 0}\r\n            className=\"btn btn-primary me-2\"\r\n            onClick={ClearText}\r\n          >\r\n            Clear Text\r\n          </button>\r\n          <button\r\n            disabled={text.length === 0}\r\n            className=\"btn btn-primary me-2\"\r\n            onClick={handleCopy}\r\n          >\r\n            {\" \"}\r\n            Copy Text\r\n          </button>\r\n          <button\r\n            disabled={text.length === 0}\r\n            className=\"btn btn-primary me-2\"\r\n            onClick={handleExtraSpaces}\r\n          >\r\n            Remove Extra Spaces\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        className=\"box my-3 m-lg-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h2>Your Text Summary</h2>\r\n        <h6>\r\n          {\r\n            text.split(\" \").filter((element) => {\r\n              return element.length !== 0;\r\n            }).length\r\n          }{\" \"}\r\n          words and {text.length} character\r\n        </h6>\r\n        <h6>{0.0032 * 60 * text.length} Seconds to read</h6>\r\n      </div>\r\n      <hr style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }} />\r\n      <div\r\n        className=\"preview m-lg-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h2>Preview :</h2>\r\n        <h6>\r\n          {text.length > 0 ? text: \"Enter Something in the Textbox Above to Preview it here!!!!\"}\r\n        </h6>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function About(props) {\r\n  \r\n  let myStyle = {\r\n    color: props.mode === \"dark\" ? \"white\" : \"#060629\",\r\n    backgroundColor: props.mode === \"dark\" ? \"rgb(27 37 41)\" : \"white\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"Container\">\r\n      <h1 className=\"heading  m-lg-4\"style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}>About Us</h1><hr />\r\n      <div className=\"accordion m-lg-3\" id=\"accordionExample \">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              <strong>Analyze Text in Real-time</strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              Businesses are inundated with information and customer comments\r\n              can appear anywhere on the web these days, but it can be difficult\r\n              to keep an eye on it all. Text analysis is a game-changer when it\r\n              comes to detecting urgent matters, wherever they may appear, 24/7\r\n              and in real time. By training text analysis models to detect\r\n              expressions and sentiments that imply negativity or urgency,\r\n              businesses can automatically flag tweets, reviews, videos,\r\n              tickets, and the like, and take action sooner rather than later.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              <strong>Free to Use</strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              Text Analyzer delivers qualitative results and text analytics\r\n              delivers quantitative results. If a machine performs text\r\n              analysis, it identifies important information within the text\r\n              itself, but if it performs text analytics, it reveals patterns\r\n              across thousands of texts, resulting in graphs, reports, tables\r\n              etc. Let's say a customer support manager wants to know how many\r\n              support tickets were solved by individual team members. In this\r\n              instance, they'd use text analytics to create a graph that\r\n              visualizes individual ticket resolution rates. However, it's\r\n              likely that the manager also wants to know which proportion of\r\n              tickets resulted in a positive or negative outcome? By analyzing\r\n              the text within each ticket, and subsequent exchanges, customer\r\n              support managers can see how each agent handled tickets, and\r\n              whether customers were happy with the outcome. Basically, the\r\n              challenge in text analysis is decoding the ambiguity of human\r\n              language, while in text analytics it's detecting patterns and\r\n              trends from the numerical results.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              <strong>Delivers Consistent Criteria</strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              Humans make errors. Fact. And the more tedious and time-consuming\r\n              a task is, the more errors they make. By training text analysis\r\n              models to your needs and criteria, algorithms are able to analyze,\r\n              understand, and sort through data much more accurately than humans\r\n              ever could.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"About  m-lg-4 \" style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}>\r\n            <h4>Made by => Adarsh&#128517;</h4>\r\n            <h5>Hope you all loved it&#128512; </h5>\r\n            <h6>Thank You!&#128516;</h6>\r\n       </div>\r\n    </div>\r\n\r\n    \r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const Capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    <div style={{ height: \"50px\" }}>\r\n      {props.alert && (\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{Capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type,\n    });\n  };\n  setTimeout(() => {\n    setalert(null);\n  }, 1500);\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.title = \"TextAnalyzer(Dark Mode)\";\n      document.body.style.backgroundColor = \"#060629\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.title = \"TextAnalyzer(Light Mode)\";\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextAnalyzer\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-4\">\n          <Switch>\n            <Route path=\"/about\">\n              <About mode={mode} />\n            </Route>\n            <Route path=\"/\">\n              <TextForm showAlert={showAlert} mode={mode} />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}